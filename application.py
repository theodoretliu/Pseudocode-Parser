import os
from flask import Flask, flash, render_template, request, session, url_for, jsonify
from power import *
from parser import parse_input

# dictionary of all root objects with id keys
roots = dict()
# dictionary of all current objects with id keys
currents = dict()
# counts the number of users on the site
counter = 0

app = Flask(__name__)
# secret key that was randomly generated by my computer. necessary to allow for session
app.secret_key = b"}\xa8\x1b\xa6/\xf4\x91\xc3\xb2cQ\xa5Ec\x08\x13B$\x0f\x87\x07a\xec\xea"

@app.route("/")
def index():
	# use the global counter variable
	global counter

	# if the number of users rises above 10000, reset the current users id to 0
	if counter > 10000:
		counter = 0

	# save the user's id as the current counter value
	session["id"] = counter

	# increment the counter for the next user
	counter += 1

	# create a new root object in the dictionary and set the current to point to that root
	roots[session["id"]] = Parent()
	currents[session["id"]] = roots[session["id"]]

	# render the home template
	return render_template("index.html")

@app.route("/about")
def about():
	return render_template("about.html")

@app.route("/contact")
def contact():
	return render_template("contact.html")

@app.route("/parse")
def parse():
	# get the pseudocode from the requests
	pseudocode = request.args.get("input")

	is_error = False

	# try to parse_input, if there is an exception, set is_error to True
	try:
		currents[session["id"]] = parse_input(pseudocode, currents[session["id"]])
	except:
		is_error = True

	# return a JSON for the AJAX request
	return jsonify(isError=is_error, code=str(roots[session["id"]]))

@app.errorhandler(404)
def page_not_found(e):
    return render_template("404.html")

# allow for the app to work on the Heroku servers.
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
